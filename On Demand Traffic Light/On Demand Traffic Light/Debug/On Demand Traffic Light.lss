
On Demand Traffic Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000c9a  00000d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800062  00800062  00000d30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001360  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a47  00000000  00000000  00002254  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d16  00000000  00000000  00002c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  000039b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000526  00000000  00000000  00003cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b59  00000000  00000000  0000421a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004d73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 37       	cpi	r26, 0x7B	; 123
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 72 02 	call	0x4e4	; 0x4e4 <main>
  8a:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <my_isr>:
	}
}
void my_isr(void)
{
	// if the button isn't already pressed
	if (pressed == 0)
  92:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  96:	81 11       	cpse	r24, r1
  98:	08 c0       	rjmp	.+16     	; 0xaa <my_isr+0x18>
		{
			//switch to pedestrian mode
			mode = PEDESTRIAN_MODE;
  9a:	80 e7       	ldi	r24, 0x70	; 112
  9c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			//set the button pressed state to 1
			pressed = 1;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			//stop the timer to stop any on going delay
			Timer0_stop();
  a6:	0e 94 02 04 	call	0x804	; 0x804 <Timer0_stop>
  aa:	08 95       	ret

000000ac <app_init>:
uint8_t mode = N_MODE;			//variable to store current mode
uint8_t pressed = 0;			//variable to store current pressed state
uint8_t const del_period = 5;	// const used to make a delay period of 5 seconds

void app_init()
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
	//setting ports and pins of all leds and the push button and initializing the external interrupt and timer0
	Traffic_Lights[CAR_GREEN].port = Traffic_Lights[CAR_YELLOW].port = Traffic_Lights[CAR_RED].port = PORT_A;
  b0:	e9 e6       	ldi	r30, 0x69	; 105
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	81 e4       	ldi	r24, 0x41	; 65
  b6:	86 83       	std	Z+6, r24	; 0x06
  b8:	83 83       	std	Z+3, r24	; 0x03
  ba:	80 83       	st	Z, r24
	Traffic_Lights[CAR_GREEN].pin = 0;
  bc:	11 82       	std	Z+1, r1	; 0x01
	Traffic_Lights[CAR_YELLOW].pin = 1;
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	24 83       	std	Z+4, r18	; 0x04
	Traffic_Lights[CAR_RED].pin = 2;
  c2:	92 e0       	ldi	r25, 0x02	; 2
  c4:	97 83       	std	Z+7, r25	; 0x07
	Traffic_Lights[PED_GREEN].port = Traffic_Lights[PED_YELLOW].port = Traffic_Lights[PED_RED].port = PORT_B;
  c6:	82 e4       	ldi	r24, 0x42	; 66
  c8:	87 87       	std	Z+15, r24	; 0x0f
  ca:	84 87       	std	Z+12, r24	; 0x0c
  cc:	81 87       	std	Z+9, r24	; 0x09
	Traffic_Lights[PED_GREEN].pin = 0;
  ce:	12 86       	std	Z+10, r1	; 0x0a
	Traffic_Lights[PED_YELLOW].pin = 1;
  d0:	25 87       	std	Z+13, r18	; 0x0d
	Traffic_Lights[PED_RED].pin = 2;
  d2:	90 8b       	std	Z+16, r25	; 0x10
	button_init(PORT_D, 2, INPUT, HIGH);
  d4:	49 e6       	ldi	r20, 0x69	; 105
  d6:	62 e0       	ldi	r22, 0x02	; 2
  d8:	84 e4       	ldi	r24, 0x44	; 68
  da:	0e 94 71 01 	call	0x2e2	; 0x2e2 <button_init>
	button_interrupt_EN(my_isr);
  de:	89 e4       	ldi	r24, 0x49	; 73
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 90 01 	call	0x320	; 0x320 <button_interrupt_EN>
	Timer0_init();
  e6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <Timer0_init>
	for (int i = 0; i < 6; i++)
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	0a c0       	rjmp	.+20     	; 0x104 <app_init+0x58>
	{
		LED_init(&Traffic_Lights[i]);
  f0:	ce 01       	movw	r24, r28
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	8c 0f       	add	r24, r28
  f8:	9d 1f       	adc	r25, r29
  fa:	87 59       	subi	r24, 0x97	; 151
  fc:	9f 4f       	sbci	r25, 0xFF	; 255
  fe:	0e 94 c3 01 	call	0x386	; 0x386 <LED_init>
	Traffic_Lights[PED_YELLOW].pin = 1;
	Traffic_Lights[PED_RED].pin = 2;
	button_init(PORT_D, 2, INPUT, HIGH);
	button_interrupt_EN(my_isr);
	Timer0_init();
	for (int i = 0; i < 6; i++)
 102:	21 96       	adiw	r28, 0x01	; 1
 104:	c6 30       	cpi	r28, 0x06	; 6
 106:	d1 05       	cpc	r29, r1
 108:	9c f3       	brlt	.-26     	; 0xf0 <app_init+0x44>
	{
		LED_init(&Traffic_Lights[i]);
	}

}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <app_start>:

void app_start(void)
{
	while (1)
	{
		if (mode == N_MODE)
 110:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 114:	8e 36       	cpi	r24, 0x6E	; 110
 116:	09 f0       	breq	.+2      	; 0x11a <app_start+0xa>
 118:	6e c0       	rjmp	.+220    	; 0x1f6 <app_start+0xe6>
 11a:	0b c0       	rjmp	.+22     	; 0x132 <app_start+0x22>
		{
			// making sure all leds are off
			for (int i = 0; i < 6; i++)
			{
				LED_off(&Traffic_Lights[i]);
 11c:	ce 01       	movw	r24, r28
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	8c 0f       	add	r24, r28
 124:	9d 1f       	adc	r25, r29
 126:	87 59       	subi	r24, 0x97	; 151
 128:	9f 4f       	sbci	r25, 0xFF	; 255
 12a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LED_off>
	while (1)
	{
		if (mode == N_MODE)
		{
			// making sure all leds are off
			for (int i = 0; i < 6; i++)
 12e:	21 96       	adiw	r28, 0x01	; 1
 130:	02 c0       	rjmp	.+4      	; 0x136 <app_start+0x26>
 132:	c0 e0       	ldi	r28, 0x00	; 0
 134:	d0 e0       	ldi	r29, 0x00	; 0
 136:	c6 30       	cpi	r28, 0x06	; 6
 138:	d1 05       	cpc	r29, r1
 13a:	84 f3       	brlt	.-32     	; 0x11c <app_start+0xc>
			{
				LED_off(&Traffic_Lights[i]);
			}
			//turn on car green and pedestrian red leds
			LED_on(&Traffic_Lights[CAR_GREEN]);
 13c:	89 e6       	ldi	r24, 0x69	; 105
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LED_on>
			LED_on(&Traffic_Lights[PED_RED]);
 144:	88 e7       	ldi	r24, 0x78	; 120
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LED_on>
			//5 second delay
			Timer0_delay(del_period);
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	80 ea       	ldi	r24, 0xA0	; 160
 152:	90 e4       	ldi	r25, 0x40	; 64
 154:	0e 94 07 04 	call	0x80e	; 0x80e <Timer0_delay>
			//check if the button was pressed (interrupt triggered) and the current mode was changed
			if(mode == PEDESTRIAN_MODE) continue;
 158:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15c:	80 37       	cpi	r24, 0x70	; 112
 15e:	c1 f2       	breq	.-80     	; 0x110 <app_start>
			//turn off car green and pedestrian red leds
			LED_off(&Traffic_Lights[CAR_GREEN]);
 160:	89 e6       	ldi	r24, 0x69	; 105
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LED_off>
			LED_off(&Traffic_Lights[PED_RED]);
 168:	88 e7       	ldi	r24, 0x78	; 120
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LED_off>
			//blink both yellow leds every 0.5 second for 5 seconds
			LED_blink(0.5, del_period, &Traffic_Lights[CAR_YELLOW], &Traffic_Lights[PED_YELLOW]);
 170:	0f 2e       	mov	r0, r31
 172:	f5 e7       	ldi	r31, 0x75	; 117
 174:	ef 2e       	mov	r14, r31
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	ff 2e       	mov	r15, r31
 17a:	f0 2d       	mov	r31, r0
 17c:	0c e6       	ldi	r16, 0x6C	; 108
 17e:	10 e0       	ldi	r17, 0x00	; 0
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	40 ea       	ldi	r20, 0xA0	; 160
 186:	50 e4       	ldi	r21, 0x40	; 64
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	9f e3       	ldi	r25, 0x3F	; 63
 190:	0e 94 1b 02 	call	0x436	; 0x436 <LED_blink>
			//check if the button was pressed (interrupt triggered) and the current mode was changed
			if(mode == PEDESTRIAN_MODE) continue;
 194:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 198:	80 37       	cpi	r24, 0x70	; 112
 19a:	09 f4       	brne	.+2      	; 0x19e <app_start+0x8e>
 19c:	b9 cf       	rjmp	.-142    	; 0x110 <app_start>
			//turn off both yellow leds
			LED_off(&Traffic_Lights[CAR_YELLOW]);
 19e:	c8 01       	movw	r24, r16
 1a0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LED_off>
			LED_off(&Traffic_Lights[PED_YELLOW]);
 1a4:	c7 01       	movw	r24, r14
 1a6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LED_off>
			//turn on car red and pedestrian green leds
			LED_on(&Traffic_Lights[CAR_RED]);
 1aa:	8f e6       	ldi	r24, 0x6F	; 111
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LED_on>
			LED_on(&Traffic_Lights[PED_GREEN]);
 1b2:	82 e7       	ldi	r24, 0x72	; 114
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LED_on>
			//5 second delay
			Timer0_delay(del_period);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	80 ea       	ldi	r24, 0xA0	; 160
 1c0:	90 e4       	ldi	r25, 0x40	; 64
 1c2:	0e 94 07 04 	call	0x80e	; 0x80e <Timer0_delay>
			//check if the button was pressed (interrupt triggered) and the current mode was changed
			if(mode == PEDESTRIAN_MODE) continue;
 1c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ca:	80 37       	cpi	r24, 0x70	; 112
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <app_start+0xc0>
 1ce:	a0 cf       	rjmp	.-192    	; 0x110 <app_start>
			//turn off car red led
			LED_off(&Traffic_Lights[CAR_RED]);
 1d0:	8f e6       	ldi	r24, 0x6F	; 111
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LED_off>
			//blink both yellow leds every 0.5 second for 5 seconds
			LED_blink(0.5, del_period, &Traffic_Lights[CAR_YELLOW], &Traffic_Lights[PED_YELLOW]);
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	40 ea       	ldi	r20, 0xA0	; 160
 1de:	50 e4       	ldi	r21, 0x40	; 64
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	9f e3       	ldi	r25, 0x3F	; 63
 1e8:	0e 94 1b 02 	call	0x436	; 0x436 <LED_blink>
			//check if the button was pressed (interrupt triggered) and the current mode was changed
			if(mode == PEDESTRIAN_MODE) continue;
 1ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f0:	80 37       	cpi	r24, 0x70	; 112
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <app_start+0xe6>
 1f4:	8d cf       	rjmp	.-230    	; 0x110 <app_start>
		}
		if (mode == PEDESTRIAN_MODE)
 1f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1fa:	80 37       	cpi	r24, 0x70	; 112
 1fc:	09 f0       	breq	.+2      	; 0x200 <app_start+0xf0>
 1fe:	88 cf       	rjmp	.-240    	; 0x110 <app_start>
		{
			//if the red light is on
			if(Traffic_Lights[CAR_RED].state == 2)
 200:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Traffic_Lights+0x8>
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	31 f4       	brne	.+12     	; 0x214 <app_start+0x104>
			{
				//5 second delay
				Timer0_delay(del_period);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	80 ea       	ldi	r24, 0xA0	; 160
 20e:	90 e4       	ldi	r25, 0x40	; 64
 210:	0e 94 07 04 	call	0x80e	; 0x80e <Timer0_delay>
			}
			//if the green light is on or the yellow leds are blinking
			if (Traffic_Lights[CAR_GREEN].state == 2 || Traffic_Lights[CAR_YELLOW].state == 3)
 214:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Traffic_Lights+0x2>
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	89 f0       	breq	.+34     	; 0x23e <app_start+0x12e>
 21c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Traffic_Lights+0x5>
 220:	83 30       	cpi	r24, 0x03	; 3
 222:	09 f0       	breq	.+2      	; 0x226 <app_start+0x116>
 224:	42 c0       	rjmp	.+132    	; 0x2aa <app_start+0x19a>
 226:	0e c0       	rjmp	.+28     	; 0x244 <app_start+0x134>
			{
				// making sure all leds are off
				for (int i = 0; i < 6; i++)
				{
					LED_off(&Traffic_Lights[i]);
 228:	ce 01       	movw	r24, r28
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	8c 0f       	add	r24, r28
 230:	9d 1f       	adc	r25, r29
 232:	87 59       	subi	r24, 0x97	; 151
 234:	9f 4f       	sbci	r25, 0xFF	; 255
 236:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LED_off>
			}
			//if the green light is on or the yellow leds are blinking
			if (Traffic_Lights[CAR_GREEN].state == 2 || Traffic_Lights[CAR_YELLOW].state == 3)
			{
				// making sure all leds are off
				for (int i = 0; i < 6; i++)
 23a:	21 96       	adiw	r28, 0x01	; 1
 23c:	05 c0       	rjmp	.+10     	; 0x248 <app_start+0x138>
 23e:	c0 e0       	ldi	r28, 0x00	; 0
 240:	d0 e0       	ldi	r29, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <app_start+0x138>
 244:	c0 e0       	ldi	r28, 0x00	; 0
 246:	d0 e0       	ldi	r29, 0x00	; 0
 248:	c6 30       	cpi	r28, 0x06	; 6
 24a:	d1 05       	cpc	r29, r1
 24c:	6c f3       	brlt	.-38     	; 0x228 <app_start+0x118>
				{
					LED_off(&Traffic_Lights[i]);
				}
				//turn on pedestrian red led
				LED_on(&Traffic_Lights[PED_RED]);
 24e:	88 e7       	ldi	r24, 0x78	; 120
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LED_on>
				//blink both yellow leds every 0.5 second for 5 seconds
				LED_blink(0.5, del_period, &Traffic_Lights[CAR_YELLOW], &Traffic_Lights[PED_YELLOW]);
 256:	0f 2e       	mov	r0, r31
 258:	f5 e7       	ldi	r31, 0x75	; 117
 25a:	ef 2e       	mov	r14, r31
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	ff 2e       	mov	r15, r31
 260:	f0 2d       	mov	r31, r0
 262:	0c e6       	ldi	r16, 0x6C	; 108
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	40 ea       	ldi	r20, 0xA0	; 160
 26c:	50 e4       	ldi	r21, 0x40	; 64
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	9f e3       	ldi	r25, 0x3F	; 63
 276:	0e 94 1b 02 	call	0x436	; 0x436 <LED_blink>
				//turn off pedestrian red led and both yellow leds
				LED_off(&Traffic_Lights[PED_RED]);
 27a:	88 e7       	ldi	r24, 0x78	; 120
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LED_off>
				LED_off(&Traffic_Lights[CAR_YELLOW]);
 282:	c8 01       	movw	r24, r16
 284:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LED_off>
				LED_off(&Traffic_Lights[PED_YELLOW]);
 288:	c7 01       	movw	r24, r14
 28a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LED_off>
				//turn on car red and pedestrian green leds
				LED_on(&Traffic_Lights[CAR_RED]);
 28e:	8f e6       	ldi	r24, 0x6F	; 111
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LED_on>
				LED_on(&Traffic_Lights[PED_GREEN]);
 296:	82 e7       	ldi	r24, 0x72	; 114
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LED_on>
				//5 second delay
				Timer0_delay(del_period);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	80 ea       	ldi	r24, 0xA0	; 160
 2a4:	90 e4       	ldi	r25, 0x40	; 64
 2a6:	0e 94 07 04 	call	0x80e	; 0x80e <Timer0_delay>
			}
			//turn off car red led
			LED_off(&Traffic_Lights[CAR_RED]);
 2aa:	8f e6       	ldi	r24, 0x6F	; 111
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LED_off>
			//blink both yellow leds every 0.5 second for 5 seconds
			LED_blink(0.5, del_period, &Traffic_Lights[CAR_YELLOW], &Traffic_Lights[PED_YELLOW]);
 2b2:	0f 2e       	mov	r0, r31
 2b4:	f5 e7       	ldi	r31, 0x75	; 117
 2b6:	ef 2e       	mov	r14, r31
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	ff 2e       	mov	r15, r31
 2bc:	f0 2d       	mov	r31, r0
 2be:	0c e6       	ldi	r16, 0x6C	; 108
 2c0:	10 e0       	ldi	r17, 0x00	; 0
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	40 ea       	ldi	r20, 0xA0	; 160
 2c8:	50 e4       	ldi	r21, 0x40	; 64
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	9f e3       	ldi	r25, 0x3F	; 63
 2d2:	0e 94 1b 02 	call	0x436	; 0x436 <LED_blink>
			//switch to normal mode
			mode = N_MODE;
 2d6:	8e e6       	ldi	r24, 0x6E	; 110
 2d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			//write zero to the button pressed state
			pressed = 0;
 2dc:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 2e0:	17 cf       	rjmp	.-466    	; 0x110 <app_start>

000002e2 <button_init>:
﻿
#include "button.h"
int button_init(uint8_t port_number, uint8_t pin_number, uint8_t mode, uint8_t value)
{
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	c8 2f       	mov	r28, r24
 2ea:	d6 2f       	mov	r29, r22
 2ec:	12 2f       	mov	r17, r18
	if (DIO_init(port_number, pin_number, mode) == DIO_OK && DIO_write(port_number, pin_number, value) == DIO_OK)
 2ee:	0e 94 79 02 	call	0x4f2	; 0x4f2 <DIO_init>
 2f2:	8f 36       	cpi	r24, 0x6F	; 111
 2f4:	91 05       	cpc	r25, r1
 2f6:	59 f4       	brne	.+22     	; 0x30e <button_init+0x2c>
 2f8:	41 2f       	mov	r20, r17
 2fa:	6d 2f       	mov	r22, r29
 2fc:	8c 2f       	mov	r24, r28
 2fe:	0e 94 13 03 	call	0x626	; 0x626 <DIO_write>
 302:	8f 36       	cpi	r24, 0x6F	; 111
 304:	91 05       	cpc	r25, r1
 306:	31 f4       	brne	.+12     	; 0x314 <button_init+0x32>
	{
		return BUTTON_OK;
 308:	88 e5       	ldi	r24, 0x58	; 88
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	05 c0       	rjmp	.+10     	; 0x318 <button_init+0x36>
	}
	return BUTTON_INIT_FAILED;
 30e:	83 e6       	ldi	r24, 0x63	; 99
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <button_init+0x36>
 314:	83 e6       	ldi	r24, 0x63	; 99
 316:	90 e0       	ldi	r25, 0x00	; 0
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	08 95       	ret

00000320 <button_interrupt_EN>:
void button_interrupt_EN(void (*func) (void))
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	ec 01       	movw	r28, r24
	int0_init();	//enable external interrupt0
 326:	0e 94 ed 03 	call	0x7da	; 0x7da <int0_init>
	my_CB = func;	//get the function called on button press
 32a:	d0 93 68 00 	sts	0x0068, r29	; 0x800068 <my_CB+0x1>
 32e:	c0 93 67 00 	sts	0x0067, r28	; 0x800067 <my_CB>
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <__vector_1>:

// interrupt service routine
ISR(INT0_vect)
{
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	2f 93       	push	r18
 344:	3f 93       	push	r19
 346:	4f 93       	push	r20
 348:	5f 93       	push	r21
 34a:	6f 93       	push	r22
 34c:	7f 93       	push	r23
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
	my_CB();
 35a:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <my_CB>
 35e:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <my_CB+0x1>
 362:	09 95       	icall
 364:	ff 91       	pop	r31
 366:	ef 91       	pop	r30
 368:	bf 91       	pop	r27
 36a:	af 91       	pop	r26
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	7f 91       	pop	r23
 372:	6f 91       	pop	r22
 374:	5f 91       	pop	r21
 376:	4f 91       	pop	r20
 378:	3f 91       	pop	r19
 37a:	2f 91       	pop	r18
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <LED_init>:

#include "led.h"

int LED_init(LEDS *led)
{
	if (DIO_init(led->port, led->pin, OUTPUT) == DIO_OK)
 386:	4f e6       	ldi	r20, 0x6F	; 111
 388:	fc 01       	movw	r30, r24
 38a:	61 81       	ldd	r22, Z+1	; 0x01
 38c:	80 81       	ld	r24, Z
 38e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <DIO_init>
 392:	8f 36       	cpi	r24, 0x6F	; 111
 394:	91 05       	cpc	r25, r1
 396:	19 f4       	brne	.+6      	; 0x39e <LED_init+0x18>
	{
		return	LED_OK;
 398:	8e ed       	ldi	r24, 0xDE	; 222
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	08 95       	ret
	}
	return LED_OPERATION_FAILED;
 39e:	8c ed       	ldi	r24, 0xDC	; 220
 3a0:	90 e0       	ldi	r25, 0x00	; 0
}
 3a2:	08 95       	ret

000003a4 <LED_on>:
int LED_on(LEDS *led)
{
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	ec 01       	movw	r28, r24
	if (DIO_write(led->port, led->pin, HIGH) == DIO_OK)
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	69 81       	ldd	r22, Y+1	; 0x01
 3ae:	88 81       	ld	r24, Y
 3b0:	0e 94 13 03 	call	0x626	; 0x626 <DIO_write>
 3b4:	8f 36       	cpi	r24, 0x6F	; 111
 3b6:	91 05       	cpc	r25, r1
 3b8:	29 f4       	brne	.+10     	; 0x3c4 <LED_on+0x20>
		{
			led->state = 2;
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	8a 83       	std	Y+2, r24	; 0x02
			return	LED_OK;
 3be:	8e ed       	ldi	r24, 0xDE	; 222
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <LED_on+0x24>
		}
	return LED_OPERATION_FAILED;
 3c4:	8c ed       	ldi	r24, 0xDC	; 220
 3c6:	90 e0       	ldi	r25, 0x00	; 0
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <LED_off>:
int LED_off(LEDS *led)
{
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	ec 01       	movw	r28, r24
	if (DIO_write(led->port, led->pin, LOW) == DIO_OK)
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	69 81       	ldd	r22, Y+1	; 0x01
 3d8:	88 81       	ld	r24, Y
 3da:	0e 94 13 03 	call	0x626	; 0x626 <DIO_write>
 3de:	8f 36       	cpi	r24, 0x6F	; 111
 3e0:	91 05       	cpc	r25, r1
 3e2:	29 f4       	brne	.+10     	; 0x3ee <LED_off+0x20>
		{
			led->state = 1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	8a 83       	std	Y+2, r24	; 0x02
			return	LED_OK;
 3e8:	8e ed       	ldi	r24, 0xDE	; 222
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <LED_off+0x24>
		}
	return LED_OPERATION_FAILED;
 3ee:	8c ed       	ldi	r24, 0xDC	; 220
 3f0:	90 e0       	ldi	r25, 0x00	; 0
}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <LED_toggle>:
int LED_toggle(LEDS *led)
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	ec 01       	movw	r28, r24
	if (DIO_toggle(led->port, led->pin) == DIO_OK)
 3fe:	69 81       	ldd	r22, Y+1	; 0x01
 400:	88 81       	ld	r24, Y
 402:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_toggle>
 406:	8f 36       	cpi	r24, 0x6F	; 111
 408:	91 05       	cpc	r25, r1
 40a:	69 f4       	brne	.+26     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		{
			if(led->state == 1) led->state = 2;
 40c:	8a 81       	ldd	r24, Y+2	; 0x02
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	11 f4       	brne	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	82 e0       	ldi	r24, 0x02	; 2
 414:	8a 83       	std	Y+2, r24	; 0x02
			if(led->state == 2) led->state = 1;
 416:	8a 81       	ldd	r24, Y+2	; 0x02
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	41 f4       	brne	.+16     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	8a 83       	std	Y+2, r24	; 0x02
			return	LED_OK;
 420:	8e ed       	ldi	r24, 0xDE	; 222
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	05 c0       	rjmp	.+10     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
		}
	return LED_OPERATION_FAILED;
 426:	8c ed       	ldi	r24, 0xDC	; 220
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
{
	if (DIO_toggle(led->port, led->pin) == DIO_OK)
		{
			if(led->state == 1) led->state = 2;
			if(led->state == 2) led->state = 1;
			return	LED_OK;
 42c:	8e ed       	ldi	r24, 0xDE	; 222
 42e:	90 e0       	ldi	r25, 0x00	; 0
		}
	return LED_OPERATION_FAILED;
	
}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	08 95       	ret

00000436 <LED_blink>:
int LED_blink(double delay, double duration, LEDS *led1, LEDS *led2)
{
 436:	4f 92       	push	r4
 438:	5f 92       	push	r5
 43a:	6f 92       	push	r6
 43c:	7f 92       	push	r7
 43e:	8f 92       	push	r8
 440:	9f 92       	push	r9
 442:	af 92       	push	r10
 444:	bf 92       	push	r11
 446:	cf 92       	push	r12
 448:	df 92       	push	r13
 44a:	ef 92       	push	r14
 44c:	ff 92       	push	r15
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	4b 01       	movw	r8, r22
 458:	5c 01       	movw	r10, r24
 45a:	29 01       	movw	r4, r18
 45c:	3a 01       	movw	r6, r20
 45e:	e8 01       	movw	r28, r16
 460:	87 01       	movw	r16, r14
	double temp = 0;
 462:	c1 2c       	mov	r12, r1
 464:	d1 2c       	mov	r13, r1
 466:	76 01       	movw	r14, r12
	while(temp <= duration)
 468:	1f c0       	rjmp	.+62     	; 0x4a8 <LED_blink+0x72>
	{
		if (LED_toggle(led1) == LED_OPERATION_FAILED) return LED_OPERATION_FAILED;
 46a:	ce 01       	movw	r24, r28
 46c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_toggle>
 470:	8c 3d       	cpi	r24, 0xDC	; 220
 472:	91 05       	cpc	r25, r1
 474:	31 f1       	breq	.+76     	; 0x4c2 <LED_blink+0x8c>
		if (LED_toggle(led2) == LED_OPERATION_FAILED) return LED_OPERATION_FAILED;
 476:	c8 01       	movw	r24, r16
 478:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_toggle>
 47c:	8c 3d       	cpi	r24, 0xDC	; 220
 47e:	91 05       	cpc	r25, r1
 480:	01 f1       	breq	.+64     	; 0x4c2 <LED_blink+0x8c>
		if(Timer0_delay(delay) == TIMER_INTERRUPTED) 
 482:	c5 01       	movw	r24, r10
 484:	b4 01       	movw	r22, r8
 486:	0e 94 07 04 	call	0x80e	; 0x80e <Timer0_delay>
 48a:	80 38       	cpi	r24, 0x80	; 128
 48c:	91 05       	cpc	r25, r1
 48e:	b9 f0       	breq	.+46     	; 0x4be <LED_blink+0x88>
		{ 
			return LED_OPERATION_FAILED;
			break; 
		}
		temp += delay;
 490:	a5 01       	movw	r20, r10
 492:	94 01       	movw	r18, r8
 494:	c7 01       	movw	r24, r14
 496:	b6 01       	movw	r22, r12
 498:	0e 94 9b 04 	call	0x936	; 0x936 <__addsf3>
 49c:	6b 01       	movw	r12, r22
 49e:	7c 01       	movw	r14, r24
		led1->state = 3;
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	8a 83       	std	Y+2, r24	; 0x02
		led2->state = 3;
 4a4:	f8 01       	movw	r30, r16
 4a6:	82 83       	std	Z+2, r24	; 0x02
	
}
int LED_blink(double delay, double duration, LEDS *led1, LEDS *led2)
{
	double temp = 0;
	while(temp <= duration)
 4a8:	a3 01       	movw	r20, r6
 4aa:	92 01       	movw	r18, r4
 4ac:	c7 01       	movw	r24, r14
 4ae:	b6 01       	movw	r22, r12
 4b0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__cmpsf2>
 4b4:	18 16       	cp	r1, r24
 4b6:	cc f6       	brge	.-78     	; 0x46a <LED_blink+0x34>
		}
		temp += delay;
		led1->state = 3;
		led2->state = 3;
	}
	return LED_OK;
 4b8:	8e ed       	ldi	r24, 0xDE	; 222
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <LED_blink+0x8c>
	{
		if (LED_toggle(led1) == LED_OPERATION_FAILED) return LED_OPERATION_FAILED;
		if (LED_toggle(led2) == LED_OPERATION_FAILED) return LED_OPERATION_FAILED;
		if(Timer0_delay(delay) == TIMER_INTERRUPTED) 
		{ 
			return LED_OPERATION_FAILED;
 4be:	8c ed       	ldi	r24, 0xDC	; 220
 4c0:	90 e0       	ldi	r25, 0x00	; 0
		temp += delay;
		led1->state = 3;
		led2->state = 3;
	}
	return LED_OK;
}
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	ff 90       	pop	r15
 4cc:	ef 90       	pop	r14
 4ce:	df 90       	pop	r13
 4d0:	cf 90       	pop	r12
 4d2:	bf 90       	pop	r11
 4d4:	af 90       	pop	r10
 4d6:	9f 90       	pop	r9
 4d8:	8f 90       	pop	r8
 4da:	7f 90       	pop	r7
 4dc:	6f 90       	pop	r6
 4de:	5f 90       	pop	r5
 4e0:	4f 90       	pop	r4
 4e2:	08 95       	ret

000004e4 <main>:

#include "Application/app.h"

int main(void)
{
	app_init();
 4e4:	0e 94 56 00 	call	0xac	; 0xac <app_init>
    app_start();
 4e8:	0e 94 88 00 	call	0x110	; 0x110 <app_start>
	
}
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	08 95       	ret

000004f2 <DIO_init>:

#include "dio.h"

int DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch(portNumber)
 4f2:	82 34       	cpi	r24, 0x42	; 66
 4f4:	59 f1       	breq	.+86     	; 0x54c <DIO_init+0x5a>
 4f6:	18 f4       	brcc	.+6      	; 0x4fe <DIO_init+0xc>
 4f8:	81 34       	cpi	r24, 0x41	; 65
 4fa:	41 f0       	breq	.+16     	; 0x50c <DIO_init+0x1a>
 4fc:	85 c0       	rjmp	.+266    	; 0x608 <DIO_init+0x116>
 4fe:	83 34       	cpi	r24, 0x43	; 67
 500:	09 f4       	brne	.+2      	; 0x504 <DIO_init+0x12>
 502:	44 c0       	rjmp	.+136    	; 0x58c <DIO_init+0x9a>
 504:	84 34       	cpi	r24, 0x44	; 68
 506:	09 f4       	brne	.+2      	; 0x50a <DIO_init+0x18>
 508:	60 c0       	rjmp	.+192    	; 0x5ca <DIO_init+0xd8>
 50a:	7e c0       	rjmp	.+252    	; 0x608 <DIO_init+0x116>
	{
		case PORT_A:
			if (direction == OUTPUT)
 50c:	4f 36       	cpi	r20, 0x6F	; 111
 50e:	69 f4       	brne	.+26     	; 0x52a <DIO_init+0x38>
			{
				DDRA |= (1<<pinNumber);   //output
 510:	2a b3       	in	r18, 0x1a	; 26
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_init+0x2a>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	6a 95       	dec	r22
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_init+0x26>
 520:	82 2b       	or	r24, r18
 522:	8a bb       	out	0x1a, r24	; 26
				return DIO_OK;
 524:	8f e6       	ldi	r24, 0x6F	; 111
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	08 95       	ret
			}
			else if (direction == INPUT)  //input
 52a:	49 36       	cpi	r20, 0x69	; 105
 52c:	09 f0       	breq	.+2      	; 0x530 <DIO_init+0x3e>
 52e:	6f c0       	rjmp	.+222    	; 0x60e <DIO_init+0x11c>
			{
				DDRA &= ~(1<<pinNumber);
 530:	2a b3       	in	r18, 0x1a	; 26
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_init+0x4a>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_init+0x46>
 540:	80 95       	com	r24
 542:	82 23       	and	r24, r18
 544:	8a bb       	out	0x1a, r24	; 26
				return DIO_OK;
 546:	8f e6       	ldi	r24, 0x6F	; 111
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	08 95       	ret
			{
				return DIO_INIT_FAILED;
			}
		break;
		case PORT_B:
			if (direction == OUTPUT)
 54c:	4f 36       	cpi	r20, 0x6F	; 111
 54e:	69 f4       	brne	.+26     	; 0x56a <DIO_init+0x78>
			{
				DDRB |= (1<<pinNumber);   //output
 550:	27 b3       	in	r18, 0x17	; 23
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_init+0x6a>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	6a 95       	dec	r22
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_init+0x66>
 560:	82 2b       	or	r24, r18
 562:	87 bb       	out	0x17, r24	; 23
				return DIO_OK;
 564:	8f e6       	ldi	r24, 0x6F	; 111
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	08 95       	ret
			}
			else if (direction == INPUT)  //input
 56a:	49 36       	cpi	r20, 0x69	; 105
 56c:	09 f0       	breq	.+2      	; 0x570 <DIO_init+0x7e>
 56e:	52 c0       	rjmp	.+164    	; 0x614 <DIO_init+0x122>
			{
				DDRB &= ~(1<<pinNumber);
 570:	27 b3       	in	r18, 0x17	; 23
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_init+0x8a>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	6a 95       	dec	r22
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_init+0x86>
 580:	80 95       	com	r24
 582:	82 23       	and	r24, r18
 584:	87 bb       	out	0x17, r24	; 23
				return DIO_OK;
 586:	8f e6       	ldi	r24, 0x6F	; 111
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	08 95       	ret
			{
				return DIO_INIT_FAILED;
			}
		break;
		case PORT_C:
			if (direction == OUTPUT)
 58c:	4f 36       	cpi	r20, 0x6F	; 111
 58e:	69 f4       	brne	.+26     	; 0x5aa <DIO_init+0xb8>
			{
				DDRC |= (1<<pinNumber);   //output
 590:	24 b3       	in	r18, 0x14	; 20
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_init+0xaa>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	6a 95       	dec	r22
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_init+0xa6>
 5a0:	82 2b       	or	r24, r18
 5a2:	84 bb       	out	0x14, r24	; 20
				return DIO_OK;
 5a4:	8f e6       	ldi	r24, 0x6F	; 111
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	08 95       	ret
			}
			else if (direction == INPUT)  //input
 5aa:	49 36       	cpi	r20, 0x69	; 105
 5ac:	b1 f5       	brne	.+108    	; 0x61a <DIO_init+0x128>
			{
				DDRC &= ~(1<<pinNumber);
 5ae:	24 b3       	in	r18, 0x14	; 20
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DIO_init+0xc8>
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	6a 95       	dec	r22
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DIO_init+0xc4>
 5be:	80 95       	com	r24
 5c0:	82 23       	and	r24, r18
 5c2:	84 bb       	out	0x14, r24	; 20
				return DIO_OK;
 5c4:	8f e6       	ldi	r24, 0x6F	; 111
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	08 95       	ret
			{
				return DIO_INIT_FAILED;
			}
		break;
		case PORT_D:
			if (direction == OUTPUT)
 5ca:	4f 36       	cpi	r20, 0x6F	; 111
 5cc:	69 f4       	brne	.+26     	; 0x5e8 <DIO_init+0xf6>
			{
				DDRD |= (1<<pinNumber);   //output
 5ce:	21 b3       	in	r18, 0x11	; 17
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_init+0xe8>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_init+0xe4>
 5de:	82 2b       	or	r24, r18
 5e0:	81 bb       	out	0x11, r24	; 17
				return DIO_OK;
 5e2:	8f e6       	ldi	r24, 0x6F	; 111
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	08 95       	ret
			}
			else if (direction == INPUT)  //input
 5e8:	49 36       	cpi	r20, 0x69	; 105
 5ea:	d1 f4       	brne	.+52     	; 0x620 <DIO_init+0x12e>
			{
				DDRD &= ~(1<<pinNumber);
 5ec:	21 b3       	in	r18, 0x11	; 17
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_init+0x106>
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	6a 95       	dec	r22
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_init+0x102>
 5fc:	80 95       	com	r24
 5fe:	82 23       	and	r24, r18
 600:	81 bb       	out	0x11, r24	; 17
				return DIO_OK;
 602:	8f e6       	ldi	r24, 0x6F	; 111
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	08 95       	ret
			{
				return DIO_INIT_FAILED;
			}
		break;
		default:
			return DIO_INIT_FAILED;
 608:	86 e1       	ldi	r24, 0x16	; 22
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	08 95       	ret
				DDRA &= ~(1<<pinNumber);
				return DIO_OK;
			}
			else
			{
				return DIO_INIT_FAILED;
 60e:	86 e1       	ldi	r24, 0x16	; 22
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	08 95       	ret
				DDRB &= ~(1<<pinNumber);
				return DIO_OK;
			}
			else
			{
				return DIO_INIT_FAILED;
 614:	86 e1       	ldi	r24, 0x16	; 22
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	08 95       	ret
				DDRC &= ~(1<<pinNumber);
				return DIO_OK;
			}
			else
			{
				return DIO_INIT_FAILED;
 61a:	86 e1       	ldi	r24, 0x16	; 22
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	08 95       	ret
				DDRD &= ~(1<<pinNumber);
				return DIO_OK;
			}
			else
			{
				return DIO_INIT_FAILED;
 620:	86 e1       	ldi	r24, 0x16	; 22
 622:	90 e0       	ldi	r25, 0x00	; 0
		break;
		default:
			return DIO_INIT_FAILED;
		break;
	}
}
 624:	08 95       	ret

00000626 <DIO_write>:

int DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	switch(portNumber)
 626:	82 34       	cpi	r24, 0x42	; 66
 628:	51 f1       	breq	.+84     	; 0x67e <DIO_write+0x58>
 62a:	18 f4       	brcc	.+6      	; 0x632 <DIO_write+0xc>
 62c:	81 34       	cpi	r24, 0x41	; 65
 62e:	41 f0       	breq	.+16     	; 0x640 <DIO_write+0x1a>
 630:	83 c0       	rjmp	.+262    	; 0x738 <DIO_write+0x112>
 632:	83 34       	cpi	r24, 0x43	; 67
 634:	09 f4       	brne	.+2      	; 0x638 <DIO_write+0x12>
 636:	42 c0       	rjmp	.+132    	; 0x6bc <DIO_write+0x96>
 638:	84 34       	cpi	r24, 0x44	; 68
 63a:	09 f4       	brne	.+2      	; 0x63e <DIO_write+0x18>
 63c:	5e c0       	rjmp	.+188    	; 0x6fa <DIO_write+0xd4>
 63e:	7c c0       	rjmp	.+248    	; 0x738 <DIO_write+0x112>
	{
		case PORT_A:
			if (value == HIGH)
 640:	41 30       	cpi	r20, 0x01	; 1
 642:	69 f4       	brne	.+26     	; 0x65e <DIO_write+0x38>
			{
				PORTA |= (1<<pinNumber);   //write 1
 644:	2b b3       	in	r18, 0x1b	; 27
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_write+0x2a>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	6a 95       	dec	r22
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_write+0x26>
 654:	82 2b       	or	r24, r18
 656:	8b bb       	out	0x1b, r24	; 27
				return DIO_OK;
 658:	8f e6       	ldi	r24, 0x6F	; 111
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	08 95       	ret
			}
			else if (value == LOW)  //write 0
 65e:	41 11       	cpse	r20, r1
 660:	6e c0       	rjmp	.+220    	; 0x73e <DIO_write+0x118>
			{
				PORTA &= ~(1<<pinNumber);
 662:	2b b3       	in	r18, 0x1b	; 27
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_write+0x48>
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	6a 95       	dec	r22
 670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_write+0x44>
 672:	80 95       	com	r24
 674:	82 23       	and	r24, r18
 676:	8b bb       	out	0x1b, r24	; 27
				return DIO_OK;
 678:	8f e6       	ldi	r24, 0x6F	; 111
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	08 95       	ret
			{
				return DIO_WRITE_FAILED;
			}
		break;
		case PORT_B:
			if (value == HIGH)
 67e:	41 30       	cpi	r20, 0x01	; 1
 680:	69 f4       	brne	.+26     	; 0x69c <DIO_write+0x76>
			{
				PORTB |= (1<<pinNumber);		//write 1
 682:	28 b3       	in	r18, 0x18	; 24
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_write+0x68>
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	6a 95       	dec	r22
 690:	e2 f7       	brpl	.-8      	; 0x68a <DIO_write+0x64>
 692:	82 2b       	or	r24, r18
 694:	88 bb       	out	0x18, r24	; 24
				return DIO_OK;
 696:	8f e6       	ldi	r24, 0x6F	; 111
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	08 95       	ret
			}
			else if (value == LOW)				//write 0
 69c:	41 11       	cpse	r20, r1
 69e:	52 c0       	rjmp	.+164    	; 0x744 <DIO_write+0x11e>
			{
				PORTB &= ~(1<<pinNumber);
 6a0:	28 b3       	in	r18, 0x18	; 24
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DIO_write+0x86>
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	6a 95       	dec	r22
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <DIO_write+0x82>
 6b0:	80 95       	com	r24
 6b2:	82 23       	and	r24, r18
 6b4:	88 bb       	out	0x18, r24	; 24
				return DIO_OK;
 6b6:	8f e6       	ldi	r24, 0x6F	; 111
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	08 95       	ret
			{
				return DIO_WRITE_FAILED;
			}
		break;
			case PORT_C:
			if (value == HIGH)
 6bc:	41 30       	cpi	r20, 0x01	; 1
 6be:	69 f4       	brne	.+26     	; 0x6da <DIO_write+0xb4>
			{
				PORTC |= (1<<pinNumber);	//write 1
 6c0:	25 b3       	in	r18, 0x15	; 21
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_write+0xa6>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_write+0xa2>
 6d0:	82 2b       	or	r24, r18
 6d2:	85 bb       	out	0x15, r24	; 21
				return DIO_OK;
 6d4:	8f e6       	ldi	r24, 0x6F	; 111
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	08 95       	ret
			}
			else if (value == LOW)			//write 0
 6da:	41 11       	cpse	r20, r1
 6dc:	36 c0       	rjmp	.+108    	; 0x74a <DIO_write+0x124>
			{
				PORTC &= ~(1<<pinNumber);
 6de:	25 b3       	in	r18, 0x15	; 21
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <DIO_write+0xc4>
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	6a 95       	dec	r22
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <DIO_write+0xc0>
 6ee:	80 95       	com	r24
 6f0:	82 23       	and	r24, r18
 6f2:	85 bb       	out	0x15, r24	; 21
				return DIO_OK;
 6f4:	8f e6       	ldi	r24, 0x6F	; 111
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	08 95       	ret
			{
				return DIO_WRITE_FAILED;
			}
		break;
		case PORT_D:
			if (value == HIGH)
 6fa:	41 30       	cpi	r20, 0x01	; 1
 6fc:	69 f4       	brne	.+26     	; 0x718 <DIO_write+0xf2>
			{
				PORTD |= (1<<pinNumber);	//write 1
 6fe:	22 b3       	in	r18, 0x12	; 18
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	02 c0       	rjmp	.+4      	; 0x70a <DIO_write+0xe4>
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	6a 95       	dec	r22
 70c:	e2 f7       	brpl	.-8      	; 0x706 <DIO_write+0xe0>
 70e:	82 2b       	or	r24, r18
 710:	82 bb       	out	0x12, r24	; 18
				return DIO_OK;
 712:	8f e6       	ldi	r24, 0x6F	; 111
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	08 95       	ret
			}
			else if (value == LOW)			//write 0
 718:	41 11       	cpse	r20, r1
 71a:	1a c0       	rjmp	.+52     	; 0x750 <DIO_write+0x12a>
			{
				PORTD &= ~(1<<pinNumber);
 71c:	22 b3       	in	r18, 0x12	; 18
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	02 c0       	rjmp	.+4      	; 0x728 <DIO_write+0x102>
 724:	88 0f       	add	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	6a 95       	dec	r22
 72a:	e2 f7       	brpl	.-8      	; 0x724 <DIO_write+0xfe>
 72c:	80 95       	com	r24
 72e:	82 23       	and	r24, r18
 730:	82 bb       	out	0x12, r24	; 18
				return DIO_OK;
 732:	8f e6       	ldi	r24, 0x6F	; 111
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	08 95       	ret
			{
				return DIO_WRITE_FAILED;
			}
		break;
	}
	return DIO_WRITE_FAILED;
 738:	81 e2       	ldi	r24, 0x21	; 33
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	08 95       	ret
				PORTA &= ~(1<<pinNumber);
				return DIO_OK;
			}
			else
			{
				return DIO_WRITE_FAILED;
 73e:	81 e2       	ldi	r24, 0x21	; 33
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	08 95       	ret
				PORTB &= ~(1<<pinNumber);
				return DIO_OK;
			}
			else
			{
				return DIO_WRITE_FAILED;
 744:	81 e2       	ldi	r24, 0x21	; 33
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	08 95       	ret
				PORTC &= ~(1<<pinNumber);
				return DIO_OK;
			}
			else
			{
				return DIO_WRITE_FAILED;
 74a:	81 e2       	ldi	r24, 0x21	; 33
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	08 95       	ret
				PORTD &= ~(1<<pinNumber);
				return DIO_OK;
			}
			else
			{
				return DIO_WRITE_FAILED;
 750:	81 e2       	ldi	r24, 0x21	; 33
 752:	90 e0       	ldi	r25, 0x00	; 0
			}
		break;
	}
	return DIO_WRITE_FAILED;
}
 754:	08 95       	ret

00000756 <DIO_toggle>:

int DIO_toggle(uint8_t portNumber, uint8_t pinNumber)
{
	switch(portNumber)
 756:	82 34       	cpi	r24, 0x42	; 66
 758:	b1 f0       	breq	.+44     	; 0x786 <DIO_toggle+0x30>
 75a:	18 f4       	brcc	.+6      	; 0x762 <DIO_toggle+0xc>
 75c:	81 34       	cpi	r24, 0x41	; 65
 75e:	31 f0       	breq	.+12     	; 0x76c <DIO_toggle+0x16>
 760:	39 c0       	rjmp	.+114    	; 0x7d4 <DIO_toggle+0x7e>
 762:	83 34       	cpi	r24, 0x43	; 67
 764:	e9 f0       	breq	.+58     	; 0x7a0 <DIO_toggle+0x4a>
 766:	84 34       	cpi	r24, 0x44	; 68
 768:	41 f1       	breq	.+80     	; 0x7ba <DIO_toggle+0x64>
 76a:	34 c0       	rjmp	.+104    	; 0x7d4 <DIO_toggle+0x7e>
	{
		case PORT_A:
			PORTA ^= (1<<pinNumber);   //toggle bit
 76c:	2b b3       	in	r18, 0x1b	; 27
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <DIO_toggle+0x22>
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	6a 95       	dec	r22
 77a:	e2 f7       	brpl	.-8      	; 0x774 <DIO_toggle+0x1e>
 77c:	82 27       	eor	r24, r18
 77e:	8b bb       	out	0x1b, r24	; 27
			return DIO_OK;
 780:	8f e6       	ldi	r24, 0x6F	; 111
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	08 95       	ret
		break;
		case PORT_B:
			PORTB ^= (1<<pinNumber);   //toggle bit
 786:	28 b3       	in	r18, 0x18	; 24
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_toggle+0x3c>
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	6a 95       	dec	r22
 794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_toggle+0x38>
 796:	82 27       	eor	r24, r18
 798:	88 bb       	out	0x18, r24	; 24
			return DIO_OK;
 79a:	8f e6       	ldi	r24, 0x6F	; 111
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	08 95       	ret
		break;
		case PORT_C:
			PORTC ^= (1<<pinNumber);   //toggle bit
 7a0:	25 b3       	in	r18, 0x15	; 21
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_toggle+0x56>
 7a8:	88 0f       	add	r24, r24
 7aa:	99 1f       	adc	r25, r25
 7ac:	6a 95       	dec	r22
 7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <DIO_toggle+0x52>
 7b0:	82 27       	eor	r24, r18
 7b2:	85 bb       	out	0x15, r24	; 21
			return DIO_OK;
 7b4:	8f e6       	ldi	r24, 0x6F	; 111
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	08 95       	ret
		break;
		case PORT_D:
			PORTD ^= (1<<pinNumber);   //toggle bit
 7ba:	22 b3       	in	r18, 0x12	; 18
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <DIO_toggle+0x70>
 7c2:	88 0f       	add	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	6a 95       	dec	r22
 7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <DIO_toggle+0x6c>
 7ca:	82 27       	eor	r24, r18
 7cc:	82 bb       	out	0x12, r24	; 18
			return DIO_OK;
 7ce:	8f e6       	ldi	r24, 0x6F	; 111
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	08 95       	ret
		break;
		default:
			return DIO_TOGGLE_FAILED;
 7d4:	8c e2       	ldi	r24, 0x2C	; 44
 7d6:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
}
 7d8:	08 95       	ret

000007da <int0_init>:
#include "int0.h"

void int0_init(void)
{
	
	sei();
 7da:	78 94       	sei
	MCUCR |= (1<<ISC01);
 7dc:	85 b7       	in	r24, 0x35	; 53
 7de:	82 60       	ori	r24, 0x02	; 2
 7e0:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
 7e2:	8b b7       	in	r24, 0x3b	; 59
 7e4:	80 64       	ori	r24, 0x40	; 64
 7e6:	8b bf       	out	0x3b, r24	; 59
 7e8:	08 95       	ret

000007ea <Timer0_init>:
#include "../DIO Driver/dio.h"
#include <avr/interrupt.h>
double overflows_counter = 0;
int Timer0_init(void)
{
	sei();
 7ea:	78 94       	sei
	TCCR0 = 0x00;
 7ec:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00;
 7ee:	12 be       	out	0x32, r1	; 50
	return INIT_OK;
}
 7f0:	8a e0       	ldi	r24, 0x0A	; 10
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	08 95       	ret

000007f6 <Timer0_start>:
int Timer0_start(void)
{
	TCNT0 = 0;
 7f6:	12 be       	out	0x32, r1	; 50
	TCCR0 |= (1<<CS00);
 7f8:	83 b7       	in	r24, 0x33	; 51
 7fa:	81 60       	ori	r24, 0x01	; 1
 7fc:	83 bf       	out	0x33, r24	; 51
	return TIMER_STARTED;
}
 7fe:	80 e1       	ldi	r24, 0x10	; 16
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	08 95       	ret

00000804 <Timer0_stop>:
int Timer0_stop(void)
{
	TCCR0 = 0x00;
 804:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0;
 806:	12 be       	out	0x32, r1	; 50
	return TIMER_STOPPED;
}
 808:	80 e2       	ldi	r24, 0x20	; 32
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	08 95       	ret

0000080e <Timer0_delay>:
int Timer0_delay(double delay)
{	
 80e:	8f 92       	push	r8
 810:	9f 92       	push	r9
 812:	af 92       	push	r10
 814:	bf 92       	push	r11
 816:	cf 92       	push	r12
 818:	df 92       	push	r13
 81a:	ef 92       	push	r14
 81c:	ff 92       	push	r15
	
	double overflows = 0;
	overflows = ceil((delay*F_CPU)/(256*PRESCALER)); // calculate needed overflows
 81e:	20 e0       	ldi	r18, 0x00	; 0
 820:	34 e2       	ldi	r19, 0x24	; 36
 822:	44 e7       	ldi	r20, 0x74	; 116
 824:	59 e4       	ldi	r21, 0x49	; 73
 826:	0e 94 de 05 	call	0xbbc	; 0xbbc <__mulsf3>
 82a:	20 e0       	ldi	r18, 0x00	; 0
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	40 e8       	ldi	r20, 0x80	; 128
 830:	5b e3       	ldi	r21, 0x3B	; 59
 832:	0e 94 de 05 	call	0xbbc	; 0xbbc <__mulsf3>
 836:	0e 94 07 05 	call	0xa0e	; 0xa0e <ceil>
 83a:	4b 01       	movw	r8, r22
 83c:	5c 01       	movw	r10, r24
	TIMSK |= (1<<TOIE0); //enable timer0 overflow interrupt
 83e:	89 b7       	in	r24, 0x39	; 57
 840:	81 60       	ori	r24, 0x01	; 1
 842:	89 bf       	out	0x39, r24	; 57
	TIFR |= (1<<TOV0); //clear timer0 overflow interrupt
 844:	88 b7       	in	r24, 0x38	; 56
 846:	81 60       	ori	r24, 0x01	; 1
 848:	88 bf       	out	0x38, r24	; 56
	Timer0_start(); // start timer
 84a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <Timer0_start>
	while (overflows_counter <= overflows && TCCR0 != 0x00); // wait till needed overflow count (delay period) while checking that the timer wasn't interruped / stopped
 84e:	c0 90 63 00 	lds	r12, 0x0063	; 0x800063 <overflows_counter>
 852:	d0 90 64 00 	lds	r13, 0x0064	; 0x800064 <overflows_counter+0x1>
 856:	e0 90 65 00 	lds	r14, 0x0065	; 0x800065 <overflows_counter+0x2>
 85a:	f0 90 66 00 	lds	r15, 0x0066	; 0x800066 <overflows_counter+0x3>
 85e:	a7 01       	movw	r20, r14
 860:	96 01       	movw	r18, r12
 862:	c5 01       	movw	r24, r10
 864:	b4 01       	movw	r22, r8
 866:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__gesf2>
 86a:	88 23       	and	r24, r24
 86c:	1c f0       	brlt	.+6      	; 0x874 <__stack+0x15>
 86e:	83 b7       	in	r24, 0x33	; 51
 870:	81 11       	cpse	r24, r1
 872:	ed cf       	rjmp	.-38     	; 0x84e <Timer0_delay+0x40>
	if(overflows_counter < overflows)
 874:	a7 01       	movw	r20, r14
 876:	96 01       	movw	r18, r12
 878:	c5 01       	movw	r24, r10
 87a:	b4 01       	movw	r22, r8
 87c:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__gesf2>
 880:	18 16       	cp	r1, r24
 882:	5c f4       	brge	.+22     	; 0x89a <__stack+0x3b>
	{
		overflows_counter = 0; // reset counter
 884:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <overflows_counter>
 888:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <overflows_counter+0x1>
 88c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <overflows_counter+0x2>
 890:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <overflows_counter+0x3>
		 return TIMER_INTERRUPTED; //error handling
 894:	80 e8       	ldi	r24, 0x80	; 128
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0c c0       	rjmp	.+24     	; 0x8b2 <__stack+0x53>
		 
	}
	Timer0_stop(); // stop timer
 89a:	0e 94 02 04 	call	0x804	; 0x804 <Timer0_stop>
	overflows_counter = 0; // reset counter
 89e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <overflows_counter>
 8a2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <overflows_counter+0x1>
 8a6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <overflows_counter+0x2>
 8aa:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <overflows_counter+0x3>
	return DELAY_COMPLETE; //error handling
 8ae:	80 e4       	ldi	r24, 0x40	; 64
 8b0:	90 e0       	ldi	r25, 0x00	; 0
	
}
 8b2:	ff 90       	pop	r15
 8b4:	ef 90       	pop	r14
 8b6:	df 90       	pop	r13
 8b8:	cf 90       	pop	r12
 8ba:	bf 90       	pop	r11
 8bc:	af 90       	pop	r10
 8be:	9f 90       	pop	r9
 8c0:	8f 90       	pop	r8
 8c2:	08 95       	ret

000008c4 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 8c4:	1f 92       	push	r1
 8c6:	0f 92       	push	r0
 8c8:	0f b6       	in	r0, 0x3f	; 63
 8ca:	0f 92       	push	r0
 8cc:	11 24       	eor	r1, r1
 8ce:	2f 93       	push	r18
 8d0:	3f 93       	push	r19
 8d2:	4f 93       	push	r20
 8d4:	5f 93       	push	r21
 8d6:	6f 93       	push	r22
 8d8:	7f 93       	push	r23
 8da:	8f 93       	push	r24
 8dc:	9f 93       	push	r25
 8de:	af 93       	push	r26
 8e0:	bf 93       	push	r27
 8e2:	ef 93       	push	r30
 8e4:	ff 93       	push	r31
	overflows_counter++;
 8e6:	20 e0       	ldi	r18, 0x00	; 0
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	40 e8       	ldi	r20, 0x80	; 128
 8ec:	5f e3       	ldi	r21, 0x3F	; 63
 8ee:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <overflows_counter>
 8f2:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <overflows_counter+0x1>
 8f6:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <overflows_counter+0x2>
 8fa:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <overflows_counter+0x3>
 8fe:	0e 94 9b 04 	call	0x936	; 0x936 <__addsf3>
 902:	60 93 63 00 	sts	0x0063, r22	; 0x800063 <overflows_counter>
 906:	70 93 64 00 	sts	0x0064, r23	; 0x800064 <overflows_counter+0x1>
 90a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <overflows_counter+0x2>
 90e:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <overflows_counter+0x3>
 912:	ff 91       	pop	r31
 914:	ef 91       	pop	r30
 916:	bf 91       	pop	r27
 918:	af 91       	pop	r26
 91a:	9f 91       	pop	r25
 91c:	8f 91       	pop	r24
 91e:	7f 91       	pop	r23
 920:	6f 91       	pop	r22
 922:	5f 91       	pop	r21
 924:	4f 91       	pop	r20
 926:	3f 91       	pop	r19
 928:	2f 91       	pop	r18
 92a:	0f 90       	pop	r0
 92c:	0f be       	out	0x3f, r0	; 63
 92e:	0f 90       	pop	r0
 930:	1f 90       	pop	r1
 932:	18 95       	reti

00000934 <__subsf3>:
 934:	50 58       	subi	r21, 0x80	; 128

00000936 <__addsf3>:
 936:	bb 27       	eor	r27, r27
 938:	aa 27       	eor	r26, r26
 93a:	0e 94 b2 04 	call	0x964	; 0x964 <__addsf3x>
 93e:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_round>
 942:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_pscA>
 946:	38 f0       	brcs	.+14     	; 0x956 <__addsf3+0x20>
 948:	0e 94 80 05 	call	0xb00	; 0xb00 <__fp_pscB>
 94c:	20 f0       	brcs	.+8      	; 0x956 <__addsf3+0x20>
 94e:	39 f4       	brne	.+14     	; 0x95e <__addsf3+0x28>
 950:	9f 3f       	cpi	r25, 0xFF	; 255
 952:	19 f4       	brne	.+6      	; 0x95a <__addsf3+0x24>
 954:	26 f4       	brtc	.+8      	; 0x95e <__addsf3+0x28>
 956:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_nan>
 95a:	0e f4       	brtc	.+2      	; 0x95e <__addsf3+0x28>
 95c:	e0 95       	com	r30
 95e:	e7 fb       	bst	r30, 7
 960:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_inf>

00000964 <__addsf3x>:
 964:	e9 2f       	mov	r30, r25
 966:	0e 94 98 05 	call	0xb30	; 0xb30 <__fp_split3>
 96a:	58 f3       	brcs	.-42     	; 0x942 <__addsf3+0xc>
 96c:	ba 17       	cp	r27, r26
 96e:	62 07       	cpc	r22, r18
 970:	73 07       	cpc	r23, r19
 972:	84 07       	cpc	r24, r20
 974:	95 07       	cpc	r25, r21
 976:	20 f0       	brcs	.+8      	; 0x980 <__addsf3x+0x1c>
 978:	79 f4       	brne	.+30     	; 0x998 <__addsf3x+0x34>
 97a:	a6 f5       	brtc	.+104    	; 0x9e4 <__addsf3x+0x80>
 97c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__fp_zero>
 980:	0e f4       	brtc	.+2      	; 0x984 <__addsf3x+0x20>
 982:	e0 95       	com	r30
 984:	0b 2e       	mov	r0, r27
 986:	ba 2f       	mov	r27, r26
 988:	a0 2d       	mov	r26, r0
 98a:	0b 01       	movw	r0, r22
 98c:	b9 01       	movw	r22, r18
 98e:	90 01       	movw	r18, r0
 990:	0c 01       	movw	r0, r24
 992:	ca 01       	movw	r24, r20
 994:	a0 01       	movw	r20, r0
 996:	11 24       	eor	r1, r1
 998:	ff 27       	eor	r31, r31
 99a:	59 1b       	sub	r21, r25
 99c:	99 f0       	breq	.+38     	; 0x9c4 <__addsf3x+0x60>
 99e:	59 3f       	cpi	r21, 0xF9	; 249
 9a0:	50 f4       	brcc	.+20     	; 0x9b6 <__addsf3x+0x52>
 9a2:	50 3e       	cpi	r21, 0xE0	; 224
 9a4:	68 f1       	brcs	.+90     	; 0xa00 <__addsf3x+0x9c>
 9a6:	1a 16       	cp	r1, r26
 9a8:	f0 40       	sbci	r31, 0x00	; 0
 9aa:	a2 2f       	mov	r26, r18
 9ac:	23 2f       	mov	r18, r19
 9ae:	34 2f       	mov	r19, r20
 9b0:	44 27       	eor	r20, r20
 9b2:	58 5f       	subi	r21, 0xF8	; 248
 9b4:	f3 cf       	rjmp	.-26     	; 0x99c <__addsf3x+0x38>
 9b6:	46 95       	lsr	r20
 9b8:	37 95       	ror	r19
 9ba:	27 95       	ror	r18
 9bc:	a7 95       	ror	r26
 9be:	f0 40       	sbci	r31, 0x00	; 0
 9c0:	53 95       	inc	r21
 9c2:	c9 f7       	brne	.-14     	; 0x9b6 <__addsf3x+0x52>
 9c4:	7e f4       	brtc	.+30     	; 0x9e4 <__addsf3x+0x80>
 9c6:	1f 16       	cp	r1, r31
 9c8:	ba 0b       	sbc	r27, r26
 9ca:	62 0b       	sbc	r22, r18
 9cc:	73 0b       	sbc	r23, r19
 9ce:	84 0b       	sbc	r24, r20
 9d0:	ba f0       	brmi	.+46     	; 0xa00 <__addsf3x+0x9c>
 9d2:	91 50       	subi	r25, 0x01	; 1
 9d4:	a1 f0       	breq	.+40     	; 0x9fe <__addsf3x+0x9a>
 9d6:	ff 0f       	add	r31, r31
 9d8:	bb 1f       	adc	r27, r27
 9da:	66 1f       	adc	r22, r22
 9dc:	77 1f       	adc	r23, r23
 9de:	88 1f       	adc	r24, r24
 9e0:	c2 f7       	brpl	.-16     	; 0x9d2 <__addsf3x+0x6e>
 9e2:	0e c0       	rjmp	.+28     	; 0xa00 <__addsf3x+0x9c>
 9e4:	ba 0f       	add	r27, r26
 9e6:	62 1f       	adc	r22, r18
 9e8:	73 1f       	adc	r23, r19
 9ea:	84 1f       	adc	r24, r20
 9ec:	48 f4       	brcc	.+18     	; 0xa00 <__addsf3x+0x9c>
 9ee:	87 95       	ror	r24
 9f0:	77 95       	ror	r23
 9f2:	67 95       	ror	r22
 9f4:	b7 95       	ror	r27
 9f6:	f7 95       	ror	r31
 9f8:	9e 3f       	cpi	r25, 0xFE	; 254
 9fa:	08 f0       	brcs	.+2      	; 0x9fe <__addsf3x+0x9a>
 9fc:	b0 cf       	rjmp	.-160    	; 0x95e <__addsf3+0x28>
 9fe:	93 95       	inc	r25
 a00:	88 0f       	add	r24, r24
 a02:	08 f0       	brcs	.+2      	; 0xa06 <__addsf3x+0xa2>
 a04:	99 27       	eor	r25, r25
 a06:	ee 0f       	add	r30, r30
 a08:	97 95       	ror	r25
 a0a:	87 95       	ror	r24
 a0c:	08 95       	ret

00000a0e <ceil>:
 a0e:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fp_trunc>
 a12:	90 f0       	brcs	.+36     	; 0xa38 <ceil+0x2a>
 a14:	9f 37       	cpi	r25, 0x7F	; 127
 a16:	48 f4       	brcc	.+18     	; 0xa2a <ceil+0x1c>
 a18:	91 11       	cpse	r25, r1
 a1a:	16 f4       	brtc	.+4      	; 0xa20 <ceil+0x12>
 a1c:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__fp_szero>
 a20:	60 e0       	ldi	r22, 0x00	; 0
 a22:	70 e0       	ldi	r23, 0x00	; 0
 a24:	80 e8       	ldi	r24, 0x80	; 128
 a26:	9f e3       	ldi	r25, 0x3F	; 63
 a28:	08 95       	ret
 a2a:	26 f0       	brts	.+8      	; 0xa34 <ceil+0x26>
 a2c:	1b 16       	cp	r1, r27
 a2e:	61 1d       	adc	r22, r1
 a30:	71 1d       	adc	r23, r1
 a32:	81 1d       	adc	r24, r1
 a34:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_mintl>
 a38:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_mpack>

00000a3c <__cmpsf2>:
 a3c:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_cmp>
 a40:	08 f4       	brcc	.+2      	; 0xa44 <__cmpsf2+0x8>
 a42:	81 e0       	ldi	r24, 0x01	; 1
 a44:	08 95       	ret

00000a46 <__fp_cmp>:
 a46:	99 0f       	add	r25, r25
 a48:	00 08       	sbc	r0, r0
 a4a:	55 0f       	add	r21, r21
 a4c:	aa 0b       	sbc	r26, r26
 a4e:	e0 e8       	ldi	r30, 0x80	; 128
 a50:	fe ef       	ldi	r31, 0xFE	; 254
 a52:	16 16       	cp	r1, r22
 a54:	17 06       	cpc	r1, r23
 a56:	e8 07       	cpc	r30, r24
 a58:	f9 07       	cpc	r31, r25
 a5a:	c0 f0       	brcs	.+48     	; 0xa8c <__fp_cmp+0x46>
 a5c:	12 16       	cp	r1, r18
 a5e:	13 06       	cpc	r1, r19
 a60:	e4 07       	cpc	r30, r20
 a62:	f5 07       	cpc	r31, r21
 a64:	98 f0       	brcs	.+38     	; 0xa8c <__fp_cmp+0x46>
 a66:	62 1b       	sub	r22, r18
 a68:	73 0b       	sbc	r23, r19
 a6a:	84 0b       	sbc	r24, r20
 a6c:	95 0b       	sbc	r25, r21
 a6e:	39 f4       	brne	.+14     	; 0xa7e <__fp_cmp+0x38>
 a70:	0a 26       	eor	r0, r26
 a72:	61 f0       	breq	.+24     	; 0xa8c <__fp_cmp+0x46>
 a74:	23 2b       	or	r18, r19
 a76:	24 2b       	or	r18, r20
 a78:	25 2b       	or	r18, r21
 a7a:	21 f4       	brne	.+8      	; 0xa84 <__fp_cmp+0x3e>
 a7c:	08 95       	ret
 a7e:	0a 26       	eor	r0, r26
 a80:	09 f4       	brne	.+2      	; 0xa84 <__fp_cmp+0x3e>
 a82:	a1 40       	sbci	r26, 0x01	; 1
 a84:	a6 95       	lsr	r26
 a86:	8f ef       	ldi	r24, 0xFF	; 255
 a88:	81 1d       	adc	r24, r1
 a8a:	81 1d       	adc	r24, r1
 a8c:	08 95       	ret

00000a8e <__fp_inf>:
 a8e:	97 f9       	bld	r25, 7
 a90:	9f 67       	ori	r25, 0x7F	; 127
 a92:	80 e8       	ldi	r24, 0x80	; 128
 a94:	70 e0       	ldi	r23, 0x00	; 0
 a96:	60 e0       	ldi	r22, 0x00	; 0
 a98:	08 95       	ret

00000a9a <__fp_mintl>:
 a9a:	88 23       	and	r24, r24
 a9c:	71 f4       	brne	.+28     	; 0xaba <__fp_mintl+0x20>
 a9e:	77 23       	and	r23, r23
 aa0:	21 f0       	breq	.+8      	; 0xaaa <__fp_mintl+0x10>
 aa2:	98 50       	subi	r25, 0x08	; 8
 aa4:	87 2b       	or	r24, r23
 aa6:	76 2f       	mov	r23, r22
 aa8:	07 c0       	rjmp	.+14     	; 0xab8 <__fp_mintl+0x1e>
 aaa:	66 23       	and	r22, r22
 aac:	11 f4       	brne	.+4      	; 0xab2 <__fp_mintl+0x18>
 aae:	99 27       	eor	r25, r25
 ab0:	0d c0       	rjmp	.+26     	; 0xacc <__fp_mintl+0x32>
 ab2:	90 51       	subi	r25, 0x10	; 16
 ab4:	86 2b       	or	r24, r22
 ab6:	70 e0       	ldi	r23, 0x00	; 0
 ab8:	60 e0       	ldi	r22, 0x00	; 0
 aba:	2a f0       	brmi	.+10     	; 0xac6 <__fp_mintl+0x2c>
 abc:	9a 95       	dec	r25
 abe:	66 0f       	add	r22, r22
 ac0:	77 1f       	adc	r23, r23
 ac2:	88 1f       	adc	r24, r24
 ac4:	da f7       	brpl	.-10     	; 0xabc <__fp_mintl+0x22>
 ac6:	88 0f       	add	r24, r24
 ac8:	96 95       	lsr	r25
 aca:	87 95       	ror	r24
 acc:	97 f9       	bld	r25, 7
 ace:	08 95       	ret

00000ad0 <__fp_mpack>:
 ad0:	9f 3f       	cpi	r25, 0xFF	; 255
 ad2:	31 f0       	breq	.+12     	; 0xae0 <__fp_mpack_finite+0xc>

00000ad4 <__fp_mpack_finite>:
 ad4:	91 50       	subi	r25, 0x01	; 1
 ad6:	20 f4       	brcc	.+8      	; 0xae0 <__fp_mpack_finite+0xc>
 ad8:	87 95       	ror	r24
 ada:	77 95       	ror	r23
 adc:	67 95       	ror	r22
 ade:	b7 95       	ror	r27
 ae0:	88 0f       	add	r24, r24
 ae2:	91 1d       	adc	r25, r1
 ae4:	96 95       	lsr	r25
 ae6:	87 95       	ror	r24
 ae8:	97 f9       	bld	r25, 7
 aea:	08 95       	ret

00000aec <__fp_nan>:
 aec:	9f ef       	ldi	r25, 0xFF	; 255
 aee:	80 ec       	ldi	r24, 0xC0	; 192
 af0:	08 95       	ret

00000af2 <__fp_pscA>:
 af2:	00 24       	eor	r0, r0
 af4:	0a 94       	dec	r0
 af6:	16 16       	cp	r1, r22
 af8:	17 06       	cpc	r1, r23
 afa:	18 06       	cpc	r1, r24
 afc:	09 06       	cpc	r0, r25
 afe:	08 95       	ret

00000b00 <__fp_pscB>:
 b00:	00 24       	eor	r0, r0
 b02:	0a 94       	dec	r0
 b04:	12 16       	cp	r1, r18
 b06:	13 06       	cpc	r1, r19
 b08:	14 06       	cpc	r1, r20
 b0a:	05 06       	cpc	r0, r21
 b0c:	08 95       	ret

00000b0e <__fp_round>:
 b0e:	09 2e       	mov	r0, r25
 b10:	03 94       	inc	r0
 b12:	00 0c       	add	r0, r0
 b14:	11 f4       	brne	.+4      	; 0xb1a <__fp_round+0xc>
 b16:	88 23       	and	r24, r24
 b18:	52 f0       	brmi	.+20     	; 0xb2e <__fp_round+0x20>
 b1a:	bb 0f       	add	r27, r27
 b1c:	40 f4       	brcc	.+16     	; 0xb2e <__fp_round+0x20>
 b1e:	bf 2b       	or	r27, r31
 b20:	11 f4       	brne	.+4      	; 0xb26 <__fp_round+0x18>
 b22:	60 ff       	sbrs	r22, 0
 b24:	04 c0       	rjmp	.+8      	; 0xb2e <__fp_round+0x20>
 b26:	6f 5f       	subi	r22, 0xFF	; 255
 b28:	7f 4f       	sbci	r23, 0xFF	; 255
 b2a:	8f 4f       	sbci	r24, 0xFF	; 255
 b2c:	9f 4f       	sbci	r25, 0xFF	; 255
 b2e:	08 95       	ret

00000b30 <__fp_split3>:
 b30:	57 fd       	sbrc	r21, 7
 b32:	90 58       	subi	r25, 0x80	; 128
 b34:	44 0f       	add	r20, r20
 b36:	55 1f       	adc	r21, r21
 b38:	59 f0       	breq	.+22     	; 0xb50 <__fp_splitA+0x10>
 b3a:	5f 3f       	cpi	r21, 0xFF	; 255
 b3c:	71 f0       	breq	.+28     	; 0xb5a <__fp_splitA+0x1a>
 b3e:	47 95       	ror	r20

00000b40 <__fp_splitA>:
 b40:	88 0f       	add	r24, r24
 b42:	97 fb       	bst	r25, 7
 b44:	99 1f       	adc	r25, r25
 b46:	61 f0       	breq	.+24     	; 0xb60 <__fp_splitA+0x20>
 b48:	9f 3f       	cpi	r25, 0xFF	; 255
 b4a:	79 f0       	breq	.+30     	; 0xb6a <__fp_splitA+0x2a>
 b4c:	87 95       	ror	r24
 b4e:	08 95       	ret
 b50:	12 16       	cp	r1, r18
 b52:	13 06       	cpc	r1, r19
 b54:	14 06       	cpc	r1, r20
 b56:	55 1f       	adc	r21, r21
 b58:	f2 cf       	rjmp	.-28     	; 0xb3e <__fp_split3+0xe>
 b5a:	46 95       	lsr	r20
 b5c:	f1 df       	rcall	.-30     	; 0xb40 <__fp_splitA>
 b5e:	08 c0       	rjmp	.+16     	; 0xb70 <__fp_splitA+0x30>
 b60:	16 16       	cp	r1, r22
 b62:	17 06       	cpc	r1, r23
 b64:	18 06       	cpc	r1, r24
 b66:	99 1f       	adc	r25, r25
 b68:	f1 cf       	rjmp	.-30     	; 0xb4c <__fp_splitA+0xc>
 b6a:	86 95       	lsr	r24
 b6c:	71 05       	cpc	r23, r1
 b6e:	61 05       	cpc	r22, r1
 b70:	08 94       	sec
 b72:	08 95       	ret

00000b74 <__fp_trunc>:
 b74:	0e 94 a0 05 	call	0xb40	; 0xb40 <__fp_splitA>
 b78:	a0 f0       	brcs	.+40     	; 0xba2 <__fp_trunc+0x2e>
 b7a:	be e7       	ldi	r27, 0x7E	; 126
 b7c:	b9 17       	cp	r27, r25
 b7e:	88 f4       	brcc	.+34     	; 0xba2 <__fp_trunc+0x2e>
 b80:	bb 27       	eor	r27, r27
 b82:	9f 38       	cpi	r25, 0x8F	; 143
 b84:	60 f4       	brcc	.+24     	; 0xb9e <__fp_trunc+0x2a>
 b86:	16 16       	cp	r1, r22
 b88:	b1 1d       	adc	r27, r1
 b8a:	67 2f       	mov	r22, r23
 b8c:	78 2f       	mov	r23, r24
 b8e:	88 27       	eor	r24, r24
 b90:	98 5f       	subi	r25, 0xF8	; 248
 b92:	f7 cf       	rjmp	.-18     	; 0xb82 <__fp_trunc+0xe>
 b94:	86 95       	lsr	r24
 b96:	77 95       	ror	r23
 b98:	67 95       	ror	r22
 b9a:	b1 1d       	adc	r27, r1
 b9c:	93 95       	inc	r25
 b9e:	96 39       	cpi	r25, 0x96	; 150
 ba0:	c8 f3       	brcs	.-14     	; 0xb94 <__fp_trunc+0x20>
 ba2:	08 95       	ret

00000ba4 <__fp_zero>:
 ba4:	e8 94       	clt

00000ba6 <__fp_szero>:
 ba6:	bb 27       	eor	r27, r27
 ba8:	66 27       	eor	r22, r22
 baa:	77 27       	eor	r23, r23
 bac:	cb 01       	movw	r24, r22
 bae:	97 f9       	bld	r25, 7
 bb0:	08 95       	ret

00000bb2 <__gesf2>:
 bb2:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_cmp>
 bb6:	08 f4       	brcc	.+2      	; 0xbba <__gesf2+0x8>
 bb8:	8f ef       	ldi	r24, 0xFF	; 255
 bba:	08 95       	ret

00000bbc <__mulsf3>:
 bbc:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__mulsf3x>
 bc0:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <__fp_round>
 bc4:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_pscA>
 bc8:	38 f0       	brcs	.+14     	; 0xbd8 <__mulsf3+0x1c>
 bca:	0e 94 80 05 	call	0xb00	; 0xb00 <__fp_pscB>
 bce:	20 f0       	brcs	.+8      	; 0xbd8 <__mulsf3+0x1c>
 bd0:	95 23       	and	r25, r21
 bd2:	11 f0       	breq	.+4      	; 0xbd8 <__mulsf3+0x1c>
 bd4:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_inf>
 bd8:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_nan>
 bdc:	11 24       	eor	r1, r1
 bde:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__fp_szero>

00000be2 <__mulsf3x>:
 be2:	0e 94 98 05 	call	0xb30	; 0xb30 <__fp_split3>
 be6:	70 f3       	brcs	.-36     	; 0xbc4 <__mulsf3+0x8>

00000be8 <__mulsf3_pse>:
 be8:	95 9f       	mul	r25, r21
 bea:	c1 f3       	breq	.-16     	; 0xbdc <__mulsf3+0x20>
 bec:	95 0f       	add	r25, r21
 bee:	50 e0       	ldi	r21, 0x00	; 0
 bf0:	55 1f       	adc	r21, r21
 bf2:	62 9f       	mul	r22, r18
 bf4:	f0 01       	movw	r30, r0
 bf6:	72 9f       	mul	r23, r18
 bf8:	bb 27       	eor	r27, r27
 bfa:	f0 0d       	add	r31, r0
 bfc:	b1 1d       	adc	r27, r1
 bfe:	63 9f       	mul	r22, r19
 c00:	aa 27       	eor	r26, r26
 c02:	f0 0d       	add	r31, r0
 c04:	b1 1d       	adc	r27, r1
 c06:	aa 1f       	adc	r26, r26
 c08:	64 9f       	mul	r22, r20
 c0a:	66 27       	eor	r22, r22
 c0c:	b0 0d       	add	r27, r0
 c0e:	a1 1d       	adc	r26, r1
 c10:	66 1f       	adc	r22, r22
 c12:	82 9f       	mul	r24, r18
 c14:	22 27       	eor	r18, r18
 c16:	b0 0d       	add	r27, r0
 c18:	a1 1d       	adc	r26, r1
 c1a:	62 1f       	adc	r22, r18
 c1c:	73 9f       	mul	r23, r19
 c1e:	b0 0d       	add	r27, r0
 c20:	a1 1d       	adc	r26, r1
 c22:	62 1f       	adc	r22, r18
 c24:	83 9f       	mul	r24, r19
 c26:	a0 0d       	add	r26, r0
 c28:	61 1d       	adc	r22, r1
 c2a:	22 1f       	adc	r18, r18
 c2c:	74 9f       	mul	r23, r20
 c2e:	33 27       	eor	r19, r19
 c30:	a0 0d       	add	r26, r0
 c32:	61 1d       	adc	r22, r1
 c34:	23 1f       	adc	r18, r19
 c36:	84 9f       	mul	r24, r20
 c38:	60 0d       	add	r22, r0
 c3a:	21 1d       	adc	r18, r1
 c3c:	82 2f       	mov	r24, r18
 c3e:	76 2f       	mov	r23, r22
 c40:	6a 2f       	mov	r22, r26
 c42:	11 24       	eor	r1, r1
 c44:	9f 57       	subi	r25, 0x7F	; 127
 c46:	50 40       	sbci	r21, 0x00	; 0
 c48:	9a f0       	brmi	.+38     	; 0xc70 <__mulsf3_pse+0x88>
 c4a:	f1 f0       	breq	.+60     	; 0xc88 <__mulsf3_pse+0xa0>
 c4c:	88 23       	and	r24, r24
 c4e:	4a f0       	brmi	.+18     	; 0xc62 <__mulsf3_pse+0x7a>
 c50:	ee 0f       	add	r30, r30
 c52:	ff 1f       	adc	r31, r31
 c54:	bb 1f       	adc	r27, r27
 c56:	66 1f       	adc	r22, r22
 c58:	77 1f       	adc	r23, r23
 c5a:	88 1f       	adc	r24, r24
 c5c:	91 50       	subi	r25, 0x01	; 1
 c5e:	50 40       	sbci	r21, 0x00	; 0
 c60:	a9 f7       	brne	.-22     	; 0xc4c <__mulsf3_pse+0x64>
 c62:	9e 3f       	cpi	r25, 0xFE	; 254
 c64:	51 05       	cpc	r21, r1
 c66:	80 f0       	brcs	.+32     	; 0xc88 <__mulsf3_pse+0xa0>
 c68:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__fp_inf>
 c6c:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__fp_szero>
 c70:	5f 3f       	cpi	r21, 0xFF	; 255
 c72:	e4 f3       	brlt	.-8      	; 0xc6c <__mulsf3_pse+0x84>
 c74:	98 3e       	cpi	r25, 0xE8	; 232
 c76:	d4 f3       	brlt	.-12     	; 0xc6c <__mulsf3_pse+0x84>
 c78:	86 95       	lsr	r24
 c7a:	77 95       	ror	r23
 c7c:	67 95       	ror	r22
 c7e:	b7 95       	ror	r27
 c80:	f7 95       	ror	r31
 c82:	e7 95       	ror	r30
 c84:	9f 5f       	subi	r25, 0xFF	; 255
 c86:	c1 f7       	brne	.-16     	; 0xc78 <__mulsf3_pse+0x90>
 c88:	fe 2b       	or	r31, r30
 c8a:	88 0f       	add	r24, r24
 c8c:	91 1d       	adc	r25, r1
 c8e:	96 95       	lsr	r25
 c90:	87 95       	ror	r24
 c92:	97 f9       	bld	r25, 7
 c94:	08 95       	ret

00000c96 <_exit>:
 c96:	f8 94       	cli

00000c98 <__stop_program>:
 c98:	ff cf       	rjmp	.-2      	; 0xc98 <__stop_program>
